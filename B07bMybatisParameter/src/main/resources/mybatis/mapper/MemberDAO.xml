<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.edu.springboot.jdbc.IMemberService">
	<!--
	회원 목록(검색기능X) 
	<select id="select"
		resultType="com.edu.springboot.jdbc.MemberDTO">
		select * from member order by regidate desc
	</select>
	-->
	<select id="select" parameterType="com.edu.springboot.jdbc.MemberDTO"
		resultType="com.edu.springboot.jdbc.MemberDTO">
		select * from member 
		<!-- 
		조건문은 <if>태그로 정의 : test에 조건 명시. JSTL과 사용법 동일 
		
		test="searchKeyword!=null and !searchKeyword.equals('')"
		파라미터 형식이
			1. 요청명?searchKeyword=xxxx -> 값이 있음
			2. 요청명?searchKeyword=     -> 빈값. ''로 체크해야함
			3. 요청명?				    -> null. 
		-->
		<if test="searchKeyword!=null and !searchKeyword.equals('')">
			where
			<!-- 
			반복문은 <foreach>태그로 정의
			- collection : 반복을 위해 사용할 컬렉션 변수명 지정
			- item : 반복시 해당 루프에서 반환되는 객체를 저장
			- open, close : 쿼리문 시작, 종료 부분에 추가할 문자열
			- separator : 쿼리문 반복시 구분자로 사용할 항목
			-->
			<foreach collection="searchField" item="sfield" open="(" close=")"
				separator="or">
				${sfield} like '%'||#{searchKeyword}||'%'
			</foreach>
		</if>
		order by regidate desc
		<!-- 
		완성 쿼리문(id, name 체크 가정)
		: select * from member where ( id like '%검색어%' or name '%검색어%' ) order by regidate desc -->
	</select>
	
	<!-- 
	회원등록 
	: request 내장객체를 통해 받은 파라미터를 개별적으로 전달한 값으로 인파라미터를 채워준다.
	DTO같은 클래스를 사용하지 않으므로 parameterType은 별도 명시 X
	전달되는 3개의 인수는 순서대로 param1,2,3과 같이 기술한다.	
	 -->
	<insert id="insert">
		insert into member(id, pass, name) values
			(#{param1}, #{param2}, #{param3})
	</insert>
	
	<!--
	회원정보 인출하기(수정1)
	: 파라미터를 @Param어노테이션으로 변경한 후 전달하므로	변경된 이름으로 인파라미터를 설정한다.  
	-->
	<select id="selectOne"
		resultType="com.edu.springboot.jdbc.MemberDTO">
		select * from member where id=#{_id}
	</select>
	
	<!-- 
	수정처리 : Map에 저장된 파라미터를 받으므로 parameterType에 Map을 명시한다.
	Map은 자바의 기본클래스지만 패키지의 풀경로를 명시해야한다.
	그리고 Key로 저장된 값을 얻어온 후 인파라미터 설정
	-->
	<update id="update"
		parameterType="java.util.HashMap">
		update member set pass=#{m_pass}, name=#{m_name} where id=#{m_id}	
	</update>
	
	<!-- 
	삭제처리 : 파라미터 순서대로 배열처럼 0,1,2와 같이 인파라미터를 설정할 수 있다.
	-->
	<delete id="delete">
		delete from member where id=#{0}
	</delete>
</mapper>
