<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
컨트롤러와 Mapper 사이에서 매개역할을 하는 인터페이스를 namespace로 지정한다.
xml파일에서는 클래스에 대한 import가 불가능하므로 아래와 같이 패키지의 풀경로를 명시해야한다. 
-->
<mapper namespace="com.edu.springboot.jdbc.IMemberService">
	<!-- 
	매퍼에서 쿼리문을 실행하기 위한 엘리먼트
	: DML의 4가지 쿼리와 동일한 이름의 엘리먼트가 존재한다.
	즉 select쿼리는 <select>엘리먼트를 사용하면된다.
	
	하위 프로퍼티
	- id : 컨트롤러에서 호출하기 위한 메서드명
		Java처럼 메서드의 원형을 쓰지 않고, 메서드명만 작성하면 된다.
		
	- resultType : 쿼리문 실행 후 반환할 결과의 타입 명시.
		select문의 경우 ResultSet이 반환되므로, 이를 저장하기 위한 DTO를 지정하면 되고
		개수가 2개 이상이라면 Mapper가 알아서 List에 add()해준다.
		insert, delete, update 쿼리문은 결과로 int를 반환하므로 안 써도 된다.
		
	- parameterType : 메서드 호출 시 파라미터로 사용할 클래스명을 명시한다.
		개발자가 직접 정의한 클래스 외에도 Map, List와 같은 컬렉션을 사용할 수 있다.
		필요없다면 생략할 수 있다.
	-->
	<select id="select"
		resultType="com.edu.springboot.jdbc.MemberDTO">
		select * from member order by regidate desc
	</select>
	
	<!-- 
	회원등록 
	 : parameterType으로 명시한 DTO의 멤버변수명을 통해 쿼리문의 인파라미터를 설정한다.
	 EL과 유사하게 DTO에 정의된 getter를 통해 값을 얻어와 세팅한다.
	 insert의 경우 반환타입은 무조건 정수형이므로 resultType은 생략할 수 있다. 
	 -->
	<insert id="insert"
		parameterType="com.edu.springboot.jdbc.MemberDTO">
		insert into member(id, pass, name) values
			(#{id}, #{pass}, #{name})
	</insert>
	
	<!-- 회원정보를 select한 후 DTO에 저장 후 반환 -->
	<select id="selectOne"
		parameterType="com.edu.springboot.jdbc.MemberDTO"
		resultType="com.edu.springboot.jdbc.MemberDTO">
		select * from member where id=#{id}
	</select>
	
	<!-- 회원정보를 수정한 결과를 반환하므로 resultType은 명시하지 않는다. -->
	<update id="update"
		parameterType="com.edu.springboot.jdbc.MemberDTO">
		update member set pass=#{pass}, name=#{name} where id=#{id}	
	</update>
	
	<delete id="delete"
		parameterType="com.edu.springboot.jdbc.MemberDTO">
		delete from member where id=#{id}
	</delete>
</mapper>
